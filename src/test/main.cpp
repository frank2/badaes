#include "main.hpp"

using namespace BadAES;

int
main
(int argc, char *argv[])
{
   Field fx, fy;
   Word wx, wy, wz;
   const SBox *sBox = SBox::AESSBox();

   /* keys */
   uint8_t key128[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
                       0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
   AESKey128 test128 = AESKey128(key128, 16);
   std::vector<Word> expansion128 = {Word({0xa0, 0xfa, 0xfe, 0x17})
                                     ,Word({0xf2, 0xc2, 0x95, 0xf2})
                                     ,Word({0x3d, 0x80, 0x47, 0x7d})
                                     ,Word({0xef, 0x44, 0xa5, 0x41})
                                     ,Word({0xd4, 0xd1, 0xc6, 0xf8})
                                     ,Word({0x6d, 0x88, 0xa3, 0x7a})
                                     ,Word({0x4e, 0x54, 0xf7, 0x0e})
                                     ,Word({0xea, 0xd2, 0x73, 0x21})
                                     ,Word({0xac, 0x77, 0x66, 0xf3})
                                     ,Word({0xd0, 0x14, 0xf9, 0xa8})};
   uint8_t key192[] = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64
                       ,0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90
                       ,0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52
                       ,0x2c, 0x6b, 0x7b};
   AESKey192 test192 = AESKey192(key192, 24);
   std::vector<Word> expansion192 = {Word({0xfe, 0x0c, 0x91, 0xf7})
                                     ,Word({0x4d, 0xb7, 0xb4, 0xbd})
                                     ,Word({0x48, 0x5a, 0xf0, 0x57})
                                     ,Word({0xa2, 0x5e, 0x7e, 0xd5})
                                     ,Word({0xec, 0x17, 0x86, 0xeb})
                                     ,Word({0x40, 0xbe, 0xeb, 0x28})
                                     ,Word({0x82, 0x1f, 0x75, 0x0a})
                                     ,Word({0xe9, 0x8b, 0xa0, 0x6f})};
   uint8_t key256[] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71,
                       0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d,
                       0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b,
                       0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3,
                       0x09, 0x14, 0xdf, 0xf4};
   AESKey256 test256 = AESKey256(key256, 32);
   std::vector<Word> expansion256 = {Word({0x9b, 0xa3, 0x54, 0x11})
                                     ,Word({0xd5, 0x9a, 0xec, 0xb8})
                                     ,Word({0x81, 0x2c, 0x81, 0xad})
                                     ,Word({0x68, 0x00, 0x7b, 0xac})
                                     ,Word({0xde, 0x13, 0x69, 0x67})
                                     ,Word({0x74, 0x9c, 0x47, 0xab})
                                     ,Word({0xfe, 0x48, 0x90, 0xd1})};

   /* encryption test */
   uint8_t plaintext[] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d
                          ,0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
   uint8_t testKeyBytes[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6
                             ,0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
   AESKey128 testKey = AESKey128(testKeyBytes, sizeof(testKeyBytes));
   uint8_t expectedCiphertext[] = {0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb
                                   ,0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32};
   uint8_t *resultCiphertext;
   uint8_t *resultPlaintext;
   size_t resultSize;
   AESCipherECB ecbMode = AESCipherECB(&testKey);
   AESCipherCBC cbcMode = AESCipherCBC(&testKey);

   fx = Field(0x57);
   fy = Field(0x83);

   assert((fx ^ fy) == Field(0xd4));
   assert(Field::AESMul(fx, fy) == Field(0xc1));
   assert(Field::AESMul(fx, Field(0x13)) == Field(0xFE));

   wx = Word({0x2, 0x1, 0x1, 0x3});
   wy = Word({0xd4, 0xbf, 0x5d, 0x30});
   wz = Word({0x04, 0x66, 0x81, 0xe5});

   assert(wx * wy == wz);

   wx = Word({0x09, 0xcf, 0x4f, 0x3c});
   wy = Word({0xcf, 0x4f, 0x3c, 0x09});

   assert(wx.rol() == wy);
   assert(wy.ror() == wx);

   assert(sBox->subByte(0x53) == 0xED);
   assert(sBox->invSubByte(0xED) == 0x53);

   wx = Word({0xcf, 0x4f, 0x3c, 0x09});
   wy = Word({0x8a, 0x84, 0xeb, 0x01});

   assert(sBox->subWord(wx) == wy);
   assert(sBox->invSubWord(wy) == wx);

   for (int i=0; i<expansion128.size(); ++i)
      assert(test128[(i+1)*AESKey128::Size] == expansion128[i]);

   for (int i=0; i<expansion192.size(); ++i)
      assert(test192[(i+1)*AESKey192::Size] == expansion192[i]);

   for (int i=0; i<expansion256.size(); ++i)
      assert(test256[(i+1)*AESKey256::Size] == expansion256[i]);

   resultCiphertext = ecbMode.encrypt(plaintext, sizeof(plaintext), &resultSize);
   assert(memcmp(resultCiphertext, expectedCiphertext, sizeof(expectedCiphertext)) == 0);
   resultPlaintext = ecbMode.decrypt(resultCiphertext, resultSize, &resultSize);
   assert(memcmp(resultPlaintext, plaintext, sizeof(plaintext)) == 0);

   delete resultCiphertext;
   delete resultPlaintext;

   resultCiphertext = cbcMode.encrypt(plaintext, sizeof(plaintext), &resultSize);
   resultPlaintext = cbcMode.decrypt(resultCiphertext, resultSize, &resultSize);
   assert(memcmp(resultPlaintext, plaintext, sizeof(plaintext)) == 0);

   return 0;
}
